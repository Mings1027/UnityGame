//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input/TouchControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace TowerDefenseInput
{
    public partial class @TouchControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @TouchControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchControls"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""b4cc9d02-b1b9-4df0-a4f4-a32a49462b08"",
            ""actions"": [
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""dcf5111e-c34f-469f-aa00-5fa256da8372"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchClick"",
                    ""type"": ""Button"",
                    ""id"": ""22490d37-281f-4351-b356-60096b2efc4e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""53d2bb54-2c6f-4091-a94d-7d7d512ae777"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""455c7508-bb66-49dc-90eb-679f2db33a9f"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c556593a-f5b8-4e43-a1d3-ec19b5e36a7e"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MOBILE"",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49d56cf4-57e3-449f-a1d7-40464eb7098a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28fb9e86-c115-4208-9a47-4842a856d7b3"",
                    ""path"": ""<Pen>/tip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09423ac9-9ffc-43ac-b7f1-e289405e7555"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MOBILE"",
                    ""action"": ""TouchClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2dc48b82-cfc7-44c2-9307-d95d4c5fd9f0"",
                    ""path"": ""<XRController>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MOBILE"",
            ""bindingGroup"": ""MOBILE"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Touch
            m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
            m_Touch_TouchPosition = m_Touch.FindAction("TouchPosition", throwIfNotFound: true);
            m_Touch_TouchClick = m_Touch.FindAction("TouchClick", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Touch
        private readonly InputActionMap m_Touch;
        private List<ITouchActions> m_TouchActionsCallbackInterfaces = new List<ITouchActions>();
        private readonly InputAction m_Touch_TouchPosition;
        private readonly InputAction m_Touch_TouchClick;
        public struct TouchActions
        {
            private @TouchControls m_Wrapper;
            public TouchActions(@TouchControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @TouchPosition => m_Wrapper.m_Touch_TouchPosition;
            public InputAction @TouchClick => m_Wrapper.m_Touch_TouchClick;
            public InputActionMap Get() { return m_Wrapper.m_Touch; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
            public void AddCallbacks(ITouchActions instance)
            {
                if (instance == null || m_Wrapper.m_TouchActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_TouchActionsCallbackInterfaces.Add(instance);
                @TouchPosition.started += instance.OnTouchPosition;
                @TouchPosition.performed += instance.OnTouchPosition;
                @TouchPosition.canceled += instance.OnTouchPosition;
                @TouchClick.started += instance.OnTouchClick;
                @TouchClick.performed += instance.OnTouchClick;
                @TouchClick.canceled += instance.OnTouchClick;
            }

            private void UnregisterCallbacks(ITouchActions instance)
            {
                @TouchPosition.started -= instance.OnTouchPosition;
                @TouchPosition.performed -= instance.OnTouchPosition;
                @TouchPosition.canceled -= instance.OnTouchPosition;
                @TouchClick.started -= instance.OnTouchClick;
                @TouchClick.performed -= instance.OnTouchClick;
                @TouchClick.canceled -= instance.OnTouchClick;
            }

            public void RemoveCallbacks(ITouchActions instance)
            {
                if (m_Wrapper.m_TouchActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ITouchActions instance)
            {
                foreach (var item in m_Wrapper.m_TouchActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_TouchActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public TouchActions @Touch => new TouchActions(this);
        private int m_MOBILESchemeIndex = -1;
        public InputControlScheme MOBILEScheme
        {
            get
            {
                if (m_MOBILESchemeIndex == -1) m_MOBILESchemeIndex = asset.FindControlSchemeIndex("MOBILE");
                return asset.controlSchemes[m_MOBILESchemeIndex];
            }
        }
        public interface ITouchActions
        {
            void OnTouchPosition(InputAction.CallbackContext context);
            void OnTouchClick(InputAction.CallbackContext context);
        }
    }
}
